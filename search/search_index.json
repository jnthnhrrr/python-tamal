{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reference","text":""},{"location":"#tamal","title":"tamal","text":""},{"location":"#tamal.break_lines","title":"break_lines","text":"<pre><code>break_lines(\n    text,\n    width,\n    hyphen=DEFAULT_HYPHEN,\n    soft_hyphen=DEFAULT_SOFT_HYPHEN,\n    hyphens=DEFAULT_HYPHENS,\n    whitespaces=DEFAULT_WHITESPACES,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to break into lines.</p> required <code>width</code> <code>int</code> <p>The target width.</p> required <code>hyphen</code> <code>str</code> <p>The string to use as hyphen when breaking a word. Can be multi-character string.</p> <code>DEFAULT_HYPHEN</code> <code>soft_hyphen</code> <code>str</code> <p>Soft hyphens existing in the text are used for breaking. If a soft hyphen is used for breaking, it will be replaced by a hyphen. Soft hyphens are considered \"invisible\", so they are not accounted against the target width. (The idea is that you add soft hyphens before breaking, break the text and remove the soft hyphens afterwards.) Can be multi-character string.</p> <code>DEFAULT_SOFT_HYPHEN</code> <code>hyphens</code> <code>set[str]</code> <p>Existing hyphens in the text are used for breaking (and left unchanged). Can be multi-character strings.</p> <code>DEFAULT_HYPHENS</code> <code>whitespaces</code> <code>set[str]</code> <p>Whitespace strings are used for breaking. Trailing whitespace strings at the end of a broken line will be removed. Can be multi-character strings. paragraph marker.</p> <code>DEFAULT_WHITESPACES</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>The resulting lines.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = 'Hello, World! Nice to meet you.'\n&gt;&gt;&gt; target_width = 15\n&gt;&gt;&gt; break_lines(text, target_width)\n['Hello, World!', 'Nice to meet', 'you.']\n\n</code></pre> Source code in <code>tamal/_wrap.py</code> <pre><code>def break_lines(\n    text: str,\n    width: int,\n    hyphen: str = DEFAULT_HYPHEN,\n    soft_hyphen: str = DEFAULT_SOFT_HYPHEN,\n    hyphens: set[str] = DEFAULT_HYPHENS,\n    whitespaces: set[str] = DEFAULT_WHITESPACES,\n) -&gt; list[str]:\n    \"\"\"\n    Parameters:\n        text: The text to break into lines.\n\n        width: The target width.\n\n        hyphen: The string to use as hyphen when breaking a word. Can be\n            multi-character string.\n\n        soft_hyphen: Soft hyphens existing in the text are used for breaking.\n            If a soft hyphen is used for breaking, it will be replaced by a\n            hyphen. Soft hyphens are considered \"invisible\", so they are not\n            accounted against the target width. (The idea is that you add soft\n            hyphens before breaking, break the text and remove the soft hyphens\n            afterwards.) Can be multi-character string.\n\n        hyphens: Existing hyphens in the text are used for breaking (and left\n            unchanged). Can be multi-character strings.\n\n        whitespaces: Whitespace strings are used for breaking. Trailing\n            whitespace strings at the end of a broken line will be removed. Can\n            be multi-character strings.\n            paragraph marker.\n\n    Returns:\n        The resulting lines.\n\n    Examples:\n    ```\n    &gt;&gt;&gt; text = 'Hello, World! Nice to meet you.'\n    &gt;&gt;&gt; target_width = 15\n    &gt;&gt;&gt; break_lines(text, target_width)\n    ['Hello, World!', 'Nice to meet', 'you.']\n\n    ```\n    \"\"\"\n    lines = []\n    while True:\n        head, tail = chunk(\n            text=text,\n            width=width,\n            hyphen=hyphen,\n            soft_hyphen=soft_hyphen,\n            hyphens=hyphens,\n            whitespaces=whitespaces,\n        )\n        for blank in whitespaces:\n            head = head.replace(blank, \" \")\n        lines.append(head)\n        if not tail:\n            break\n        text = tail\n    return lines\n</code></pre>"},{"location":"#tamal.chunk","title":"chunk","text":"<pre><code>chunk(\n    text,\n    width,\n    hyphen=DEFAULT_HYPHEN,\n    soft_hyphen=DEFAULT_SOFT_HYPHEN,\n    hyphens=DEFAULT_HYPHENS,\n    whitespaces=DEFAULT_WHITESPACES,\n)\n</code></pre> <p>Splitting at hyphens, soft hyphen or whitespace, or forcing a break by adding a hyphen,returning the head with maximum width, and the remaining tail.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to break.</p> required <code>width</code> <code>int</code> <p>The target width.</p> required <code>hyphen</code> <code>str</code> <p>The string to use as hyphen when breaking a word. Can be multi-character string.</p> <code>DEFAULT_HYPHEN</code> <code>soft_hyphen</code> <code>str</code> <p>Soft hyphens existing in the text are used for breaking. If a soft hyphen is used for breaking, it will be replaced by a hyphen. Soft hyphens are considered \"invisible\", so they are not accounted against the target width. (The idea is that you add soft hyphens before breaking, break the text and remove the soft hyphens afterwards.) Can be multi-character string.</p> <code>DEFAULT_SOFT_HYPHEN</code> <code>hyphens</code> <code>set[str]</code> <p>Existing hyphens in the text are used for breaking (and left unchanged). Can be multi-character strings.</p> <code>DEFAULT_HYPHENS</code> <code>whitespaces</code> <code>set[str]</code> <p>Whitespace strings are used for breaking. Trailing whitespace strings at the end of a broken line will be removed. Can be multi-character strings. paragraph marker.</p> <code>DEFAULT_WHITESPACES</code> <p>Returns:</p> Type Description <code>tuple[Head, Tail]</code> <p>Head and Tail.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = 'Hello, World! Nice to meet you.'\n&gt;&gt;&gt; target_width = 15\n&gt;&gt;&gt; chunk(text, target_width)\n('Hello, World!', 'Nice to meet you.')\n\n</code></pre> Source code in <code>tamal/_wrap.py</code> <pre><code>def chunk(\n    text: str,\n    width: int,\n    hyphen: str = DEFAULT_HYPHEN,\n    soft_hyphen: str = DEFAULT_SOFT_HYPHEN,\n    hyphens: set[str] = DEFAULT_HYPHENS,\n    whitespaces: set[str] = DEFAULT_WHITESPACES,\n) -&gt; tuple[Head, Tail]:\n    \"\"\"\n    Splitting at hyphens, soft hyphen or whitespace, or forcing a break by\n    adding a hyphen,returning the head with maximum width, and the remaining\n    tail.\n\n    Parameters:\n        text: The text to break.\n\n        width: The target width.\n\n        hyphen: The string to use as hyphen when breaking a word. Can be\n            multi-character string.\n\n        soft_hyphen: Soft hyphens existing in the text are used for breaking.\n            If a soft hyphen is used for breaking, it will be replaced by a\n            hyphen. Soft hyphens are considered \"invisible\", so they are not\n            accounted against the target width. (The idea is that you add soft\n            hyphens before breaking, break the text and remove the soft hyphens\n            afterwards.) Can be multi-character string.\n\n        hyphens: Existing hyphens in the text are used for breaking (and left\n            unchanged). Can be multi-character strings.\n\n        whitespaces: Whitespace strings are used for breaking. Trailing\n            whitespace strings at the end of a broken line will be removed. Can\n            be multi-character strings.\n            paragraph marker.\n\n    Returns:\n        Head and Tail.\n\n    Examples:\n    ```\n    &gt;&gt;&gt; text = 'Hello, World! Nice to meet you.'\n    &gt;&gt;&gt; target_width = 15\n    &gt;&gt;&gt; chunk(text, target_width)\n    ('Hello, World!', 'Nice to meet you.')\n\n    ```\n    \"\"\"\n    hyphens.add(hyphen)\n    width = _visible_index(text, width, soft_hyphen)\n    if len(text) &lt;= width:\n        return text, \"\"\n    # Sorting break_strings so that longer hyphens prevail in break_indices\n    break_strings = sorted(\n        list(hyphens | {soft_hyphen} | whitespaces), key=lambda s: len(s)\n    )\n    break_indices = {\n        _latest_occurrence(char, text[: width + len(char) - 1]): char\n        for char in break_strings\n    }\n    break_index = max(break_indices.keys())\n    if not break_index:\n        return (text[: width - 1] + hyphen, text[width - 1 :])\n\n    char = break_indices[break_index]\n    if char in whitespaces:\n        return text[:break_index], text[break_index + len(char) :]\n    if char in hyphens:\n        break_index += len(char)\n        return (text[:break_index], text[break_index:])\n    if char == soft_hyphen:\n        # Replacing the soft hyphen with a hyphen when breaking at it\n        return (\n            text[:break_index] + hyphen,\n            text[break_index + len(char) :],\n        )\n    raise Exception(\"Shouldn't be getting here\")\n</code></pre>"},{"location":"#tamal.wrap","title":"wrap","text":"<pre><code>wrap(\n    text,\n    width,\n    hyphen=DEFAULT_HYPHEN,\n    soft_hyphen=DEFAULT_SOFT_HYPHEN,\n    hyphens=DEFAULT_HYPHENS,\n    whitespaces=DEFAULT_WHITESPACES,\n    paragraph=DEFAULT_PARAGRAPH,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to wrap.</p> required <code>width</code> <code>int</code> <p>The target width.</p> required <code>hyphen</code> <code>str</code> <p>The string to use as hyphen when breaking a word. Can be multi-character string.</p> <code>DEFAULT_HYPHEN</code> <code>soft_hyphen</code> <code>str</code> <p>Soft hyphens existing in the text are used for breaking. If a soft hyphen is used for breaking, it will be replaced by a hyphen. Soft hyphens are considered \"invisible\", so they are not accounted against the target width. (The idea is that you add soft hyphens before wrapping, wrap the text and remove the soft hyphens afterwards.) Can be multi-character string.</p> <code>DEFAULT_SOFT_HYPHEN</code> <code>hyphens</code> <code>set[str]</code> <p>Existing hyphens in the text are used for breaking (and left unchanged). Can be multi-character strings.</p> <code>DEFAULT_HYPHENS</code> <code>whitespaces</code> <code>set[str]</code> <p>Whitespace strings are used for breaking. Trailing whitespace strings at the end of a broken line will be removed. Can be multi-character strings.</p> <code>DEFAULT_WHITESPACES</code> <code>paragraph</code> <code>str</code> <p>Marker for the beginning of a new paragraph. Paragraphs will remain in the text when wrapping. If you want to treat existing line breaks as \"hard\" line breaks, use the line break chacter as paragraph marker.</p> <code>DEFAULT_PARAGRAPH</code> <p>Returns:</p> Type Description <code>str</code> <p>The wrapped text as a string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = \"Hello, World!++++Nice to meet you. This text is a bit long.\"\n&gt;&gt;&gt; target_width = 15\n&gt;&gt;&gt; print(wrap(text, target_width, paragraph=\"++++\"))\nHello, World!\n&lt;BLANKLINE&gt;\nNice to meet\nyou. This text\nis a bit long.\n\n</code></pre> Source code in <code>tamal/_wrap.py</code> <pre><code>def wrap(\n    text: str,\n    width: int,\n    hyphen: str = DEFAULT_HYPHEN,\n    soft_hyphen: str = DEFAULT_SOFT_HYPHEN,\n    hyphens: set[str] = DEFAULT_HYPHENS,\n    whitespaces: set[str] = DEFAULT_WHITESPACES,\n    paragraph: str = DEFAULT_PARAGRAPH,\n) -&gt; str:\n    \"\"\"\n    Parameters:\n        text: The text to wrap.\n\n        width: The target width.\n\n        hyphen: The string to use as hyphen when breaking a word. Can be\n            multi-character string.\n\n        soft_hyphen: Soft hyphens existing in the text are used for breaking.\n            If a soft hyphen is used for breaking, it will be replaced by a\n            hyphen. Soft hyphens are considered \"invisible\", so they are not\n            accounted against the target width. (The idea is that you add soft\n            hyphens before wrapping, wrap the text and remove the soft hyphens\n            afterwards.) Can be multi-character string.\n\n        hyphens: Existing hyphens in the text are used for breaking (and left\n            unchanged). Can be multi-character strings.\n\n        whitespaces: Whitespace strings are used for breaking. Trailing\n            whitespace strings at the end of a broken line will be removed. Can\n            be multi-character strings.\n\n        paragraph: Marker for the beginning of a new paragraph. Paragraphs will\n            remain in the text when wrapping. If you want to treat existing\n            line breaks as \"hard\" line breaks, use the line break chacter as\n            paragraph marker.\n\n    Returns:\n        The wrapped text as a string.\n\n    Examples:\n    ```\n    &gt;&gt;&gt; text = \"Hello, World!++++Nice to meet you. This text is a bit long.\"\n    &gt;&gt;&gt; target_width = 15\n    &gt;&gt;&gt; print(wrap(text, target_width, paragraph=\"++++\"))\n    Hello, World!\n    &lt;BLANKLINE&gt;\n    Nice to meet\n    you. This text\n    is a bit long.\n\n    ```\n    \"\"\"\n    chunks = text.split(paragraph)\n    wrapped_chunks = []\n    for chunk in chunks:\n        wrapped_chunks.append(\n            \"\\n\".join(\n                break_lines(\n                    chunk,\n                    width=width,\n                    hyphen=hyphen,\n                    soft_hyphen=soft_hyphen,\n                    hyphens=hyphens,\n                    whitespaces=whitespaces,\n                )\n            )\n        )\n    return \"\\n\\n\".join(wrapped_chunks)\n</code></pre>"},{"location":"#tamal.Head","title":"tamal.Head  <code>module-attribute</code>","text":"<pre><code>Head = str\n</code></pre>"},{"location":"#tamal.Tail","title":"tamal.Tail  <code>module-attribute</code>","text":"<pre><code>Tail = str\n</code></pre>"},{"location":"#tamal.defaults","title":"tamal.defaults","text":""},{"location":"#tamal.defaults.DEFAULT_HYPHEN","title":"tamal.defaults.DEFAULT_HYPHEN  <code>module-attribute</code>","text":"<pre><code>DEFAULT_HYPHEN = '-'\n</code></pre>"},{"location":"#tamal.defaults.DEFAULT_HYPHENS","title":"tamal.defaults.DEFAULT_HYPHENS  <code>module-attribute</code>","text":"<pre><code>DEFAULT_HYPHENS = {'-', '\u2013', '\u2014'}\n</code></pre>"},{"location":"#tamal.defaults.DEFAULT_SOFT_HYPHEN","title":"tamal.defaults.DEFAULT_SOFT_HYPHEN  <code>module-attribute</code>","text":"<pre><code>DEFAULT_SOFT_HYPHEN = '\u00b7'\n</code></pre>"},{"location":"#tamal.defaults.DEFAULT_WHITESPACES","title":"tamal.defaults.DEFAULT_WHITESPACES  <code>module-attribute</code>","text":"<pre><code>DEFAULT_WHITESPACES = {' ', '\\t', '\\n'}\n</code></pre>"},{"location":"#tamal.defaults.DEFAULT_PARAGRAPH","title":"tamal.defaults.DEFAULT_PARAGRAPH  <code>module-attribute</code>","text":"<pre><code>DEFAULT_PARAGRAPH = '\\n\\n'\n</code></pre>"}]}